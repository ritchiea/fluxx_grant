- display_program_budget = Fluxx.config(:show_program_budget) == "1" || Fluxx.config(:show_sub_program_budget) == "1" || Fluxx.config(:show_initiative_budget) == "1" || Fluxx.config(:show_sub_initiative_budget) == "1"

- parent_model ||= grab_param(:funding_source_allocation, :parent_model)
- do_suppress_add ||= grab_param(:funding_source_allocation, :do_suppress_add)
- program_id ||= grab_param(:funding_source_allocation, :program_id)
- sub_program_id ||= grab_param(:funding_source_allocation, :sub_program_id)
- initiative_id ||= grab_param(:funding_source_allocation, :initiative_id)
- sub_initiative_id ||= grab_param(:funding_source_allocation, :sub_initiative_id)
- spending_year ||= grab_param(:funding_source_allocation, :spending_year)
- programs = Program.where(:id => (models.map(&:program_id).compact))
- sub_programs = SubProgram.where(:id => (models.map(&:sub_program_id).compact))
- initiatives = Initiative.where(:id => (models.map(&:initiative_id).compact))
- sub_initiatives = SubInitiative.where(:id => (models.map(&:sub_initiative_id).compact))
- hierarchy = [{:level => 'program', :models => programs}, {:level => "sub_program", :models => sub_programs}, {:level => "initiative", :models => initiatives}, {:level => "sub_initiative", :models => sub_initiatives}]
- total_funding = 0
- unless !models || models.empty?
  -models.each do |funding_source_allocation_model|
    - funding_source_allocation_model.funding_source_allocation_authorities.each do |model|
      - total_funding += (model.amount || 0)
%h3
  - if current_user.is_admin? && !do_suppress_add
    %span.actions
      - if display_program_budget
        = link_to 'Add Budget Allocation', new_funding_source_allocation_path(:program_id => program_id, :sub_program_id => sub_program_id, :initiative_id => initiative_id, :sub_initiative_id => sub_initiative_id, :budget_allocation => true, :funding_source_allocation => {:spending_year => spending_year}), :class => 'to-modal', 'data-on-success' => 'refreshCaller,close', :title => "Add Budget Allocation"
        = link_to 'Add Spending Allocation', new_funding_source_allocation_authority_path(:program_id => program_id, :sub_program_id => sub_program_id, :initiative_id => initiative_id, :sub_initiative_id => sub_initiative_id, :funding_source_allocation => {:spending_year => spending_year}), :class => 'to-modal', 'data-on-success' => 'refreshCaller,close', :title => "Add Spending Allocation"

- if !models || models.empty?
  %p.caption= "There are no funding source allocations."
- else
  - global_totals = [0,0,0,0,0,0,0]
  - hierarchy.each do |level|
    - level[:models].each do |item|
      -models.each do |funding_source_allocation_model|
        -if funding_source_allocation_model["#{level[:level]}_id"] == item.id
          - if funding_source_allocation_model.funding_source.is_approved?
            -global_totals[0] += (funding_source_allocation_model.amount || 0)
            -global_totals[1] += (funding_source_allocation_model.amount_granted_in_queue || 0)
            -global_totals[2] += (funding_source_allocation_model.amount_granted || 0)
            -global_totals[3] += (funding_source_allocation_model.amount_paid || 0)
            -global_totals[4] += (funding_source_allocation_model.amount_remaining || 0) - (funding_source_allocation_model.amount_granted_in_queue || 0)
          -global_totals[5] += (funding_source_allocation_model.budget_amount || 0) # Budgeting should be summed regardless of whether it's approved
          -global_totals[6] += (funding_source_allocation_model.actual_budget_amount || 0) # Actual should be summed regardless of whether it's approved
  %table{:cellspacing => 0, :class => 'totals-table', :style => "postion: relative;top: 0px;"}
    %thead
      %tr
        %th Spending Year Funding
        - if display_program_budget
          %th Budgeted
          %th{:class => :ar} Actual
        %th{:class => :ar} Allocated
        %th Pipeline
        %th Granted
        %th Paid
        %th Available
    %tbody
      %tr
        %td Total
        - if display_program_budget
          %td= global_totals[5].to_currency(:precision => 0)
          %td{:class => :ar}= global_totals[6].to_currency(:precision => 0)
        %td{:class => :ar}= global_totals[0].to_currency(:precision => 0)
        %td= global_totals[1].to_currency(:precision => 0)
        %td= global_totals[2].to_currency(:precision => 0)
        %td= global_totals[3].to_currency(:precision => 0)
        %td= global_totals[4].to_currency(:precision => 0)
  - hierarchy.each do |level|
    - level[:models].each do |item|
      -title = item.name unless level[:level] == parent_model
      = render :partial => 'program_budgets/list_program_budget', :locals => {"#{item.class.name.tableize.singularize}_id".to_sym => item.id, :spending_year => spending_year, :div_class_name => 'program-show-partial-sub-span', :title => title }
          
      
      %table{:cellspacing => 0, :class => 'totals-table'}
        %thead
          %tr
            %th Funding Source
            - if display_program_budget
              %th Budgeted
              %th{:class => :ar} Actual
            %th{:class => :ar} Allocated
            %th Pipeline
            %th Granted
            %th Paid
            %th Available
        %tbody
          -totals = [0,0,0,0,0,0,0]
          -total_allocated_pending = 0
          -models.each do |funding_source_allocation_model|
            -next unless funding_source_allocation_model["#{level[:level]}_id"] == item.id
            - allocation_is_approved = funding_source_allocation_model.funding_source.is_approved?
            %tr{:class => (!allocation_is_approved ? 'un_approved' : '')}
              %td
                = funding_source_allocation_model.funding_source.name if funding_source_allocation_model.funding_source
                %ul
                  - funding_source_allocation_model.funding_source_allocation_authorities.each do |model|
                    %li
                      - if current_user.is_admin? && current_user.has_delete_for_model?(model)
                        %span.actions= link_to image_tag("/images/fluxx_engine/theme/default/icons/delete.png"), funding_source_allocation_authority_path(model), {:class => "as-delete #{model.can_delete? ? '' : 'disabled'}", 'data-on-success' => 'refreshCaller'}
                        = raw "#{model.authority} - #{link_to((model.amount || 0).to_currency(:precision => 0), edit_funding_source_allocation_authority_path(model), :class => 'to-modal', :title => 'Update Funding Source', 'data-on-success' => 'refreshCaller,close')}"

              - totals[5] += (funding_source_allocation_model.budget_amount || 0)
              - totals[6] += (funding_source_allocation_model.actual_budget_amount || 0)
              - if display_program_budget
                %td= link_to (funding_source_allocation_model.budget_amount || 0).to_currency(:precision => 0), edit_funding_source_allocation_path(funding_source_allocation_model), :class => 'to-modal', 'data-on-success' => 'refreshCaller,close', :title => "Edit Budget Allocation"
                %td{:class => :ar}= link_to (funding_source_allocation_model.actual_budget_amount || 0).to_currency(:precision => 0), edit_funding_source_allocation_path(funding_source_allocation_model), :class => 'to-modal', 'data-on-success' => 'refreshCaller,close', :title => "Edit Actual Allocation"
              - allocated = (funding_source_allocation_model.amount || 0)
              - if allocation_is_approved
                - totals[0] += allocated 
              - else
                - total_allocated_pending += allocated 
              %td{:class => :ar}= allocated.to_currency(:precision => 0)
              - pipeline = (funding_source_allocation_model.amount_granted_in_queue || 0)
              - totals[1] += pipeline if allocation_is_approved
              %td= link_to (pipeline.to_currency(:precision => 0)), grant_requests_path, 'data-filter' => "&request[funding_source_allocation_id][]=#{funding_source_allocation_model.id}", :class => 'new-listing', 'data-insert' => 'after', :title => 'Requests'
              - granted = (funding_source_allocation_model.amount_granted || 0)
              - totals[2] += granted if allocation_is_approved
              %td= link_to (granted.to_currency(:precision => 0)), granted_requests_path, 'data-filter' => "&request[funding_source_allocation_id][]=#{funding_source_allocation_model.id}", :class => 'new-listing', 'data-insert' => 'after', :title => 'Grants'
              - paid = (funding_source_allocation_model.amount_paid || 0)
              - totals[3] += paid if allocation_is_approved
              %td= link_to (paid.to_currency(:precision => 0)), request_transactions_path, 'data-filter' => "&request_transaction[filter_state][]=paid&request_transaction[funding_source_allocation_id][]=#{funding_source_allocation_model.id}", :class => 'new-listing', 'data-insert' => 'after', :title => 'Transactions'
              - available = allocation_is_approved ? ((funding_source_allocation_model.amount_remaining || 0) - (pipeline || 0)) : 0
              - totals[4] += available if allocation_is_approved
              %td= available.to_currency(:precision => 0)
          %tr
            %td Total
            - if display_program_budget
              %td= (totals[5] || 0).to_currency(:precision => 0)
              %td{:class => :ar}= (totals[6] || 0).to_currency(:precision => 0)
            %td{:class => :ar}
              = totals[0].to_currency(:precision => 0)
              - if total_allocated_pending && total_allocated_pending > 0
                = "(#{total_allocated_pending.to_currency(:precision => 0)} pending)"
            %td= totals[1].to_currency(:precision => 0)
            %td= totals[2].to_currency(:precision => 0)
            %td= totals[3].to_currency(:precision => 0)
            %td= totals[4].to_currency(:precision => 0)
      %p
      &nbsp;
